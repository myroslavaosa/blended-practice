{"version":3,"file":"index.js","sources":["../src/js/refs.js","../src/js/storage.js","../src/main.js"],"sourcesContent":["export const refs = {\n    form: document.querySelector('.login-form'),\n    emailInfo: document.querySelector('[name=\"email\"]'),\n    passwordInfo: document.querySelector('[name=\"password\"]'),\n    btn: document.querySelector('[name=\"button\"]'),\n};\n","export const save = (key, obj) => {\n  localStorage.setItem(key, JSON.stringify(obj));\n};\n\nexport const get = key => {\n  const lsData = localStorage.getItem(key);\n  if (lsData) {\n    const parseData = JSON.parse(lsData);\n    return parseData;\n  }\n};\n","// Перед вами форма для авторизації на сайті (правильні дані для входу збережені в обʼєкті USER_DATA)\n\n// Розбийте код на кілька файлів:\n// storage.js - функції для роботи зі сховищем;\n// refs.js - посилання на всі потрібні елементи в html;\n// main.js - головний файл, де вся основна логіка додатка.\n// Ви маєте додати перевірку введених даних при сабміті:\n// Якщо введені дані не збігаються зі збереженими, викликайте аlert і\n// повідомляйте про помилку.\n\n// Якщо імейл і пароль користувача збігаються, зберігайте дані з форми\n// у локальне сховище і змінюйте кнопку Login на Logout, також робіть поля введення\n// недоступними для змін.\n// При перезавантаженні сторінки, якщо користувач авторизован, ми маємо бачити logout-кнопку\n// та недоступні для зміни поля з даними користувача.\n// Клік по кнопці logout повертає все до початкового вигляду і видаляє дані користувача\n// з локального сховища.\n\nimport { refs } from './js/refs';\nimport { get, save } from './js/storage';\n\nconst USER_DATA = {\n  email: 'user@mail.com',\n  password: 'secret',\n};\n\nconst LS_KEY = 'userdata';\n\nrefs.form.addEventListener('submit', e => {\n  e.preventDefault();\n  const emailInput = refs.emailInfo.value.trim();\n  const passwordInput = refs.passwordInfo.value.trim();\n  if (emailInput === '' || passwordInput === '') {\n    alert('Pls put something it!');\n    return;\n  }\n  if (emailInput !== USER_DATA.email || passwordInput !== USER_DATA.password) {\n    alert('Wrong password or email!');\n    return;\n  }\n  save(LS_KEY, {\n    email: emailInput,\n    password: passwordInput,\n  });\n  refs.btn.textContent = 'Logout';\n  refs.emailInfo.setAttribute('readonly', true);\n  refs.passwordInfo.setAttribute('readonly', true);\n});\n\nconst parseData = get(LS_KEY);\nif (parseData) {\n  refs.emailInfo.value = parseData.email || '';\n  refs.passwordInfo.value = parseData.password || '';\n\n  refs.emailInfo.setAttribute('readonly', true);\n  refs.passwordInfo.setAttribute('readonly', true);\n  refs.btn.textContent = 'Logout';\n}\n"],"names":["refs","save","key","obj","get","lsData","USER_DATA","LS_KEY","e","emailInput","passwordInput","parseData"],"mappings":"ssBAAO,MAAMA,EAAO,CAChB,KAAM,SAAS,cAAc,aAAa,EAC1C,UAAW,SAAS,cAAc,gBAAgB,EAClD,aAAc,SAAS,cAAc,mBAAmB,EACxD,IAAK,SAAS,cAAc,iBAAiB,CACjD,ECLaC,EAAO,CAACC,EAAKC,IAAQ,CAChC,aAAa,QAAQD,EAAK,KAAK,UAAUC,CAAG,CAAC,CAC/C,EAEaC,EAAMF,GAAO,CACxB,MAAMG,EAAS,aAAa,QAAQH,CAAG,EACvC,GAAIG,EAEF,OADkB,KAAK,MAAMA,CAAM,CAGvC,ECWMC,EAAY,CAChB,MAAO,gBACP,SAAU,QACZ,EAEMC,EAAS,WAEfP,EAAK,KAAK,iBAAiB,SAAUQ,GAAK,CACxCA,EAAE,eAAc,EAChB,MAAMC,EAAaT,EAAK,UAAU,MAAM,KAAI,EACtCU,EAAgBV,EAAK,aAAa,MAAM,KAAI,EAClD,GAAIS,IAAe,IAAMC,IAAkB,GAAI,CAC7C,MAAM,uBAAuB,EAC7B,MACD,CACD,GAAID,IAAeH,EAAU,OAASI,IAAkBJ,EAAU,SAAU,CAC1E,MAAM,0BAA0B,EAChC,MACD,CACDL,EAAKM,EAAQ,CACX,MAAOE,EACP,SAAUC,CACd,CAAG,EACDV,EAAK,IAAI,YAAc,SACvBA,EAAK,UAAU,aAAa,WAAY,EAAI,EAC5CA,EAAK,aAAa,aAAa,WAAY,EAAI,CACjD,CAAC,EAED,MAAMW,EAAYP,EAAIG,CAAM,EACxBI,IACFX,EAAK,UAAU,MAAQW,EAAU,OAAS,GAC1CX,EAAK,aAAa,MAAQW,EAAU,UAAY,GAEhDX,EAAK,UAAU,aAAa,WAAY,EAAI,EAC5CA,EAAK,aAAa,aAAa,WAAY,EAAI,EAC/CA,EAAK,IAAI,YAAc"}